def inputFilesCircExplorer2(wildcards):
	return expand("{replicat}/{condition}/CircExplorer2/{type}/{sample}_{type}_back_spliced_junction_withHeaders.bed", type=config["USED_READS"], replicat=wildcards.replicat, condition=wildcards.condition, sample=wildcards.sample)

def inputFilesCircRNAFinder(wildcards):
	return expand("{replicat}/{condition}/circRNA_finder/{type}/{sample}_{type}_filteredJunctions_withHeaders.bed", type=config["USED_READS"], replicat=wildcards.replicat, condition=wildcards.condition, sample=wildcards.sample)

def inputFilesFindCirc(wildcards):
	return expand("{replicat}/{condition}/find_circ/{type}/Resultats/{sample}_{type}_filtered_splice_circ_withHeaders.bed", type=config["USED_READS"], replicat=wildcards.replicat, condition=wildcards.condition, sample=wildcards.sample)

rule merge_predictions:
	input:
		CIRCEXPLORER2=inputFilesCircExplorer2,
		CIRCRNAFINDER=inputFilesCircRNAFinder,
		FINDCIRC=inputFilesFindCirc,
		PACKAGE_GENOME="BSgenome."+config["GENOME"]["NAME"]+"."+config["GENOME"]["SOURCE"]+".1_1.0.tar.gz"
	output:
		merge="{replicat}/{condition}/Global_results/{sample}{condition}Merge.csv"
	params:
		condition="{condition}",
		path="{replicat}/{condition}/Global_results/{sample}",
		packageName="BSgenome."+config["GENOME"]["NAME"]+"."+config["GENOME"]["SOURCE"]+".1"
	script:
		"/CirComPara/myScript/mergeScript.R"
